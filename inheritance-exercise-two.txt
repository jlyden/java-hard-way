http://pages.cs.wisc.edu/~hasti/cs368/JavaTutorial/NOTES/Inheritance-intro.html

Consider the following program:

class Point {
    private int x, y;
    
    public String toString() {
        return "(" + x + ", " + y + ")";
    }

    public void SetPoint(int a, int b) {
		x = a;
		y = b;
    }

    public static void main(String[] args) {
        Point p1 = new Point();
		p1.SetPoint(10, 20);
		Point p2 = p1;
		p1.SetPoint(20, 30);
		System.out.println(p2);
    }
}
Question 1: What is printed when this program is run?
(20,30)

Question 2(a): Write a new version of the program in which main uses cloning to copy from p1 to p2 (instead of assignment). Be sure to include all appropriate changes to the Point class.

class Point implements Cloneable {
    private int x, y;
    
    public String toString() {
        return "(" + x + ", " + y + ")";
    }

    public void SetPoint(int a, int b) {
		x = a;
		y = b;
    }

	public Object clone() {
		try{
			Point tmp = (Point) super.clone();
			return tmp;
		} catch (CloneNotSupportedException ex) {
			throw new InternalError(ex.toString());
		}	
	}

    public static void main(String[] args) {
        Point p1 = new Point();
		p1.SetPoint(10, 20);
		Point p2 = (Point)p1.clone();
		p1.SetPoint(20, 30);
		System.out.println(p2);
    }
}

Question 2(b): What is printed when your new version of the program is run?
(10,20)

Question 3: Now suppose that the x,y coordinates of a Point are stored in an array, rather than in two int fields; i.e., suppose we replace:
	private x, y;
with:
	private int [] coords = new int[2];
	and that we change the SetPoint method to:
	public void SetPoint(int a, int b) {
		coords[0] = a;
		coords[1] = b;
	}
and that we change the toString method appropriately. Write a new version of the clone method so that there is no aliasing when a Point is cloned.

class Point implements Cloneable {
	private int [] coords = new int[2];
    
    public String toString() {
        return "(" + coords[0] + ", " + coords[1] + ")";
    }

	public void SetPoint(int a, int b) {
		coords[0] = a;
		coords[1] = b;
	}

	public Object clone() {
		try {
			Point tmp = (Point) super.clone();
			tmp.coords = (int[]) coords.clone();
			return tmp;
		} catch (CloneNotSupportedException ex) {
			throw new InternalError(ex.toString());
		}	
	}

    public static void main(String[] args) {
        Point p1 = new Point();
		p1.SetPoint(10, 20);
		Point p2 = (Point)p1.clone();
		p1.SetPoint(20, 30);
		System.out.println(p2);
    }
}
